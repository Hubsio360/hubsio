
import React, { useEffect, useState } from 'react';
import { useFormContext } from 'react-hook-form';
import { 
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage
} from '@/components/ui/form';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue 
} from '@/components/ui/select';
import { useData } from '@/contexts/DataContext';
import { RiskThreat, RiskVulnerability } from '@/types';
import { RiskScenarioFormValues } from '@/components/risk-analysis/new-scenario/RiskScenarioForm';

interface ThreatVulnerabilitySectionProps {
  companyId: string;
}

export function ThreatVulnerabilitySection({ companyId }: ThreatVulnerabilitySectionProps) {
  const { control } = useFormContext<RiskScenarioFormValues>();
  const { 
    riskThreats, 
    riskVulnerabilities, 
    fetchRiskThreatsByCompanyId, 
    fetchRiskVulnerabilitiesByCompanyId 
  } = useData();
  
  const [loading, setLoading] = useState({
    threats: false,
    vulnerabilities: false
  });
  
  // Fetch threats and vulnerabilities when component mounts
  useEffect(() => {
    const fetchData = async () => {
      setLoading(prev => ({ ...prev, threats: true }));
      await fetchRiskThreatsByCompanyId(companyId);
      setLoading(prev => ({ ...prev, threats: false }));
      
      setLoading(prev => ({ ...prev, vulnerabilities: true }));
      await fetchRiskVulnerabilitiesByCompanyId(companyId);
      setLoading(prev => ({ ...prev, vulnerabilities: false }));
    };
    
    if (companyId) {
      fetchData();
    }
    
    return () => {
      // Cleanup function
    };
  }, [companyId, fetchRiskThreatsByCompanyId, fetchRiskVulnerabilitiesByCompanyId]);
  
  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium">Menaces et vulnérabilités associées</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <FormField
          control={control}
          name="threatId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Menace associée</FormLabel>
              <Select 
                onValueChange={field.onChange} 
                defaultValue={field.value || 'none'}
                value={field.value || 'none'}
                disabled={loading.threats}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Sélectionner une menace" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="none">Aucune menace associée</SelectItem>
                  {riskThreats.map((threat: RiskThreat) => (
                    <SelectItem key={threat.id} value={threat.id}>
                      {threat.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={control}
          name="vulnerabilityId"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Vulnérabilité associée</FormLabel>
              <Select 
                onValueChange={field.onChange} 
                defaultValue={field.value || 'none'}
                value={field.value || 'none'}
                disabled={loading.vulnerabilities}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Sélectionner une vulnérabilité" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="none">Aucune vulnérabilité associée</SelectItem>
                  {riskVulnerabilities.map((vulnerability: RiskVulnerability) => (
                    <SelectItem key={vulnerability.id} value={vulnerability.id}>
                      {vulnerability.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
    </div>
  );
}
